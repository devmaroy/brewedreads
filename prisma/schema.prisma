// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id               String   @id @default(cuid())
  isbn             String   @unique
  title            String
  slug             String
  publisher        String
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  publishedDate    DateTime
  pageCount        Int
  genres           Genre[]
  description      String
  teaser           String
  language         String
  coverImageUrl    String
  coverImageWidth  Int
  coverImageHeight Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  ratings          Rating[]
  averageRating    Float?   @default(0)
  reviews          Review[]
  author           Author   @relation(fields: [authorId], references: [id])
  authorId         String
}

model Author {
  id    String @id @default(cuid())
  name  String
  slug  String
  books Book[]
}

model Genre {
  id    String @id @default(cuid())
  name  String
  slug  String
  books Book[]
}

model Rating {
  id     String @id @default(cuid())
  score  Float
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Review {
  id      String @id @default(cuid())
  content String
  book    Book   @relation(fields: [bookId], references: [id])
  bookId  String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  avatar        String?
  ratings       Rating[]
  reviews       Review[]
  Account       Account[]
  Session       Session[]
  Role          Role?     @relation(fields: [roleId], references: [id])
  roleId        String?
  Book          Book[]
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}
